# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eccode_swig', [dirname(__file__)])
        except ImportError:
            import _eccode_swig
            return _eccode_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_eccode_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eccode_swig = swig_import_helper()
    del swig_import_helper
else:
    import _eccode_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def cdata(*args):
  return _eccode_swig.cdata(*args)
cdata = _eccode_swig.cdata

def memmove(*args):
  return _eccode_swig.memmove(*args)
memmove = _eccode_swig.memmove
GRIB_SUCCESS = _eccode_swig.GRIB_SUCCESS
GRIB_END_OF_FILE = _eccode_swig.GRIB_END_OF_FILE
GRIB_INTERNAL_ERROR = _eccode_swig.GRIB_INTERNAL_ERROR
GRIB_BUFFER_TOO_SMALL = _eccode_swig.GRIB_BUFFER_TOO_SMALL
GRIB_NOT_IMPLEMENTED = _eccode_swig.GRIB_NOT_IMPLEMENTED
GRIB_7777_NOT_FOUND = _eccode_swig.GRIB_7777_NOT_FOUND
GRIB_ARRAY_TOO_SMALL = _eccode_swig.GRIB_ARRAY_TOO_SMALL
GRIB_FILE_NOT_FOUND = _eccode_swig.GRIB_FILE_NOT_FOUND
GRIB_CODE_NOT_FOUND_IN_TABLE = _eccode_swig.GRIB_CODE_NOT_FOUND_IN_TABLE
GRIB_WRONG_ARRAY_SIZE = _eccode_swig.GRIB_WRONG_ARRAY_SIZE
GRIB_NOT_FOUND = _eccode_swig.GRIB_NOT_FOUND
GRIB_IO_PROBLEM = _eccode_swig.GRIB_IO_PROBLEM
GRIB_INVALID_MESSAGE = _eccode_swig.GRIB_INVALID_MESSAGE
GRIB_DECODING_ERROR = _eccode_swig.GRIB_DECODING_ERROR
GRIB_ENCODING_ERROR = _eccode_swig.GRIB_ENCODING_ERROR
GRIB_NO_MORE_IN_SET = _eccode_swig.GRIB_NO_MORE_IN_SET
GRIB_GEOCALCULUS_PROBLEM = _eccode_swig.GRIB_GEOCALCULUS_PROBLEM
GRIB_OUT_OF_MEMORY = _eccode_swig.GRIB_OUT_OF_MEMORY
GRIB_READ_ONLY = _eccode_swig.GRIB_READ_ONLY
GRIB_INVALID_ARGUMENT = _eccode_swig.GRIB_INVALID_ARGUMENT
GRIB_NULL_HANDLE = _eccode_swig.GRIB_NULL_HANDLE
GRIB_INVALID_SECTION_NUMBER = _eccode_swig.GRIB_INVALID_SECTION_NUMBER
GRIB_VALUE_CANNOT_BE_MISSING = _eccode_swig.GRIB_VALUE_CANNOT_BE_MISSING
GRIB_WRONG_LENGTH = _eccode_swig.GRIB_WRONG_LENGTH
GRIB_INVALID_TYPE = _eccode_swig.GRIB_INVALID_TYPE
GRIB_WRONG_STEP = _eccode_swig.GRIB_WRONG_STEP
GRIB_WRONG_STEP_UNIT = _eccode_swig.GRIB_WRONG_STEP_UNIT
GRIB_INVALID_FILE = _eccode_swig.GRIB_INVALID_FILE
GRIB_INVALID_GRIB = _eccode_swig.GRIB_INVALID_GRIB
GRIB_INVALID_INDEX = _eccode_swig.GRIB_INVALID_INDEX
GRIB_INVALID_ITERATOR = _eccode_swig.GRIB_INVALID_ITERATOR
GRIB_INVALID_KEYS_ITERATOR = _eccode_swig.GRIB_INVALID_KEYS_ITERATOR
GRIB_INVALID_NEAREST = _eccode_swig.GRIB_INVALID_NEAREST
GRIB_INVALID_ORDERBY = _eccode_swig.GRIB_INVALID_ORDERBY
GRIB_MISSING_KEY = _eccode_swig.GRIB_MISSING_KEY
GRIB_OUT_OF_AREA = _eccode_swig.GRIB_OUT_OF_AREA
GRIB_CONCEPT_NO_MATCH = _eccode_swig.GRIB_CONCEPT_NO_MATCH
GRIB_NO_DEFINITIONS = _eccode_swig.GRIB_NO_DEFINITIONS
GRIB_WRONG_TYPE = _eccode_swig.GRIB_WRONG_TYPE
GRIB_END = _eccode_swig.GRIB_END
GRIB_NO_VALUES = _eccode_swig.GRIB_NO_VALUES
GRIB_WRONG_GRID = _eccode_swig.GRIB_WRONG_GRID
GRIB_END_OF_INDEX = _eccode_swig.GRIB_END_OF_INDEX
GRIB_NULL_INDEX = _eccode_swig.GRIB_NULL_INDEX
GRIB_PREMATURE_END_OF_FILE = _eccode_swig.GRIB_PREMATURE_END_OF_FILE
GRIB_INTERNAL_ARRAY_TOO_SMALL = _eccode_swig.GRIB_INTERNAL_ARRAY_TOO_SMALL
GRIB_MESSAGE_TOO_LARGE = _eccode_swig.GRIB_MESSAGE_TOO_LARGE
GRIB_CONSTANT_FIELD = _eccode_swig.GRIB_CONSTANT_FIELD
GRIB_SWITCH_NO_MATCH = _eccode_swig.GRIB_SWITCH_NO_MATCH
GRIB_UNDERFLOW = _eccode_swig.GRIB_UNDERFLOW
GRIB_MESSAGE_MALFORMED = _eccode_swig.GRIB_MESSAGE_MALFORMED
GRIB_CORRUPTED_INDEX = _eccode_swig.GRIB_CORRUPTED_INDEX
GRIB_INVALID_BPV = _eccode_swig.GRIB_INVALID_BPV
GRIB_DIFFERENT_EDITION = _eccode_swig.GRIB_DIFFERENT_EDITION
GRIB_VALUE_DIFFERENT = _eccode_swig.GRIB_VALUE_DIFFERENT
GRIB_INVALID_KEY_VALUE = _eccode_swig.GRIB_INVALID_KEY_VALUE
class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eccode_swig.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eccode_swig.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _eccode_swig.intp_assign(self, *args)
    def value(self): return _eccode_swig.intp_value(self)
    def cast(self): return _eccode_swig.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _eccode_swig.intp_frompointer
    if _newclass:frompointer = staticmethod(_eccode_swig.intp_frompointer)
intp_swigregister = _eccode_swig.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _eccode_swig.intp_frompointer(*args)
intp_frompointer = _eccode_swig.intp_frompointer

class longp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, longp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, longp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eccode_swig.new_longp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eccode_swig.delete_longp
    __del__ = lambda self : None;
    def assign(self, *args): return _eccode_swig.longp_assign(self, *args)
    def value(self): return _eccode_swig.longp_value(self)
    def cast(self): return _eccode_swig.longp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _eccode_swig.longp_frompointer
    if _newclass:frompointer = staticmethod(_eccode_swig.longp_frompointer)
longp_swigregister = _eccode_swig.longp_swigregister
longp_swigregister(longp)

def longp_frompointer(*args):
  return _eccode_swig.longp_frompointer(*args)
longp_frompointer = _eccode_swig.longp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _eccode_swig.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eccode_swig.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return _eccode_swig.doublep_assign(self, *args)
    def value(self): return _eccode_swig.doublep_value(self)
    def cast(self): return _eccode_swig.doublep_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _eccode_swig.doublep_frompointer
    if _newclass:frompointer = staticmethod(_eccode_swig.doublep_frompointer)
doublep_swigregister = _eccode_swig.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return _eccode_swig.doublep_frompointer(*args)
doublep_frompointer = _eccode_swig.doublep_frompointer


def new_doubleArray(*args):
  return _eccode_swig.new_doubleArray(*args)
new_doubleArray = _eccode_swig.new_doubleArray

def delete_doubleArray(*args):
  return _eccode_swig.delete_doubleArray(*args)
delete_doubleArray = _eccode_swig.delete_doubleArray

def doubleArray_getitem(*args):
  return _eccode_swig.doubleArray_getitem(*args)
doubleArray_getitem = _eccode_swig.doubleArray_getitem

def doubleArray_setitem(*args):
  return _eccode_swig.doubleArray_setitem(*args)
doubleArray_setitem = _eccode_swig.doubleArray_setitem

def new_longArray(*args):
  return _eccode_swig.new_longArray(*args)
new_longArray = _eccode_swig.new_longArray

def delete_longArray(*args):
  return _eccode_swig.delete_longArray(*args)
delete_longArray = _eccode_swig.delete_longArray

def longArray_getitem(*args):
  return _eccode_swig.longArray_getitem(*args)
longArray_getitem = _eccode_swig.longArray_getitem

def longArray_setitem(*args):
  return _eccode_swig.longArray_setitem(*args)
longArray_setitem = _eccode_swig.longArray_setitem

def new_intArray(*args):
  return _eccode_swig.new_intArray(*args)
new_intArray = _eccode_swig.new_intArray

def delete_intArray(*args):
  return _eccode_swig.delete_intArray(*args)
delete_intArray = _eccode_swig.delete_intArray

def intArray_getitem(*args):
  return _eccode_swig.intArray_getitem(*args)
intArray_getitem = _eccode_swig.intArray_getitem

def intArray_setitem(*args):
  return _eccode_swig.intArray_setitem(*args)
intArray_setitem = _eccode_swig.intArray_setitem

def grib_c_new_from_file(*args):
  return _eccode_swig.grib_c_new_from_file(*args)
grib_c_new_from_file = _eccode_swig.grib_c_new_from_file

def grib_c_new_bufr_from_file(*args):
  return _eccode_swig.grib_c_new_bufr_from_file(*args)
grib_c_new_bufr_from_file = _eccode_swig.grib_c_new_bufr_from_file

def grib_c_new_gts_from_file(*args):
  return _eccode_swig.grib_c_new_gts_from_file(*args)
grib_c_new_gts_from_file = _eccode_swig.grib_c_new_gts_from_file

def grib_c_iterator_new(*args):
  return _eccode_swig.grib_c_iterator_new(*args)
grib_c_iterator_new = _eccode_swig.grib_c_iterator_new

def grib_c_keys_iterator_new(*args):
  return _eccode_swig.grib_c_keys_iterator_new(*args)
grib_c_keys_iterator_new = _eccode_swig.grib_c_keys_iterator_new

def grib_c_new_from_samples(*args):
  return _eccode_swig.grib_c_new_from_samples(*args)
grib_c_new_from_samples = _eccode_swig.grib_c_new_from_samples

def grib_c_index_new_from_file(*args):
  return _eccode_swig.grib_c_index_new_from_file(*args)
grib_c_index_new_from_file = _eccode_swig.grib_c_index_new_from_file

def grib_c_index_add_file(*args):
  return _eccode_swig.grib_c_index_add_file(*args)
grib_c_index_add_file = _eccode_swig.grib_c_index_add_file

def grib_c_new_from_index(*args):
  return _eccode_swig.grib_c_new_from_index(*args)
grib_c_new_from_index = _eccode_swig.grib_c_new_from_index

def grib_c_index_write(*args):
  return _eccode_swig.grib_c_index_write(*args)
grib_c_index_write = _eccode_swig.grib_c_index_write

def grib_c_index_read(*args):
  return _eccode_swig.grib_c_index_read(*args)
grib_c_index_read = _eccode_swig.grib_c_index_read

def grib_c_new_from_message(*args):
  return _eccode_swig.grib_c_new_from_message(*args)
grib_c_new_from_message = _eccode_swig.grib_c_new_from_message

def grib_c_count_in_file(*args):
  return _eccode_swig.grib_c_count_in_file(*args)
grib_c_count_in_file = _eccode_swig.grib_c_count_in_file

def grib_c_release(*args):
  return _eccode_swig.grib_c_release(*args)
grib_c_release = _eccode_swig.grib_c_release

def grib_c_write(*args):
  return _eccode_swig.grib_c_write(*args)
grib_c_write = _eccode_swig.grib_c_write

def grib_c_get_size_long(*args):
  return _eccode_swig.grib_c_get_size_long(*args)
grib_c_get_size_long = _eccode_swig.grib_c_get_size_long

def grib_c_get_string_length(*args):
  return _eccode_swig.grib_c_get_string_length(*args)
grib_c_get_string_length = _eccode_swig.grib_c_get_string_length

def grib_c_clone(*args):
  return _eccode_swig.grib_c_clone(*args)
grib_c_clone = _eccode_swig.grib_c_clone

def grib_c_copy_namespace(*args):
  return _eccode_swig.grib_c_copy_namespace(*args)
grib_c_copy_namespace = _eccode_swig.grib_c_copy_namespace

def grib_c_get_message_size(*args):
  return _eccode_swig.grib_c_get_message_size(*args)
grib_c_get_message_size = _eccode_swig.grib_c_get_message_size

def grib_c_get_message_offset(*args):
  return _eccode_swig.grib_c_get_message_offset(*args)
grib_c_get_message_offset = _eccode_swig.grib_c_get_message_offset

def grib_c_get_native_type(*args):
  return _eccode_swig.grib_c_get_native_type(*args)
grib_c_get_native_type = _eccode_swig.grib_c_get_native_type

def grib_c_multi_new():
  return _eccode_swig.grib_c_multi_new()
grib_c_multi_new = _eccode_swig.grib_c_multi_new

def grib_c_multi_support_on():
  return _eccode_swig.grib_c_multi_support_on()
grib_c_multi_support_on = _eccode_swig.grib_c_multi_support_on

def grib_c_multi_write(*args):
  return _eccode_swig.grib_c_multi_write(*args)
grib_c_multi_write = _eccode_swig.grib_c_multi_write

def grib_c_multi_support_off():
  return _eccode_swig.grib_c_multi_support_off()
grib_c_multi_support_off = _eccode_swig.grib_c_multi_support_off

def grib_c_multi_release(*args):
  return _eccode_swig.grib_c_multi_release(*args)
grib_c_multi_release = _eccode_swig.grib_c_multi_release

def grib_c_multi_append(*args):
  return _eccode_swig.grib_c_multi_append(*args)
grib_c_multi_append = _eccode_swig.grib_c_multi_append

def grib_c_gribex_mode_on():
  return _eccode_swig.grib_c_gribex_mode_on()
grib_c_gribex_mode_on = _eccode_swig.grib_c_gribex_mode_on

def grib_c_gribex_mode_off():
  return _eccode_swig.grib_c_gribex_mode_off()
grib_c_gribex_mode_off = _eccode_swig.grib_c_gribex_mode_off

def grib_c_keys_iterator_next(*args):
  return _eccode_swig.grib_c_keys_iterator_next(*args)
grib_c_keys_iterator_next = _eccode_swig.grib_c_keys_iterator_next

def grib_c_keys_iterator_delete(*args):
  return _eccode_swig.grib_c_keys_iterator_delete(*args)
grib_c_keys_iterator_delete = _eccode_swig.grib_c_keys_iterator_delete

def grib_c_skip_computed(*args):
  return _eccode_swig.grib_c_skip_computed(*args)
grib_c_skip_computed = _eccode_swig.grib_c_skip_computed

def grib_c_skip_coded(*args):
  return _eccode_swig.grib_c_skip_coded(*args)
grib_c_skip_coded = _eccode_swig.grib_c_skip_coded

def grib_c_skip_edition_specific(*args):
  return _eccode_swig.grib_c_skip_edition_specific(*args)
grib_c_skip_edition_specific = _eccode_swig.grib_c_skip_edition_specific

def grib_c_skip_duplicates(*args):
  return _eccode_swig.grib_c_skip_duplicates(*args)
grib_c_skip_duplicates = _eccode_swig.grib_c_skip_duplicates

def grib_c_skip_read_only(*args):
  return _eccode_swig.grib_c_skip_read_only(*args)
grib_c_skip_read_only = _eccode_swig.grib_c_skip_read_only

def grib_c_skip_function(*args):
  return _eccode_swig.grib_c_skip_function(*args)
grib_c_skip_function = _eccode_swig.grib_c_skip_function

def grib_c_keys_iterator_rewind(*args):
  return _eccode_swig.grib_c_keys_iterator_rewind(*args)
grib_c_keys_iterator_rewind = _eccode_swig.grib_c_keys_iterator_rewind

def grib_c_keys_iterator_get_name(*args):
  return _eccode_swig.grib_c_keys_iterator_get_name(*args)
grib_c_keys_iterator_get_name = _eccode_swig.grib_c_keys_iterator_get_name

def grib_c_index_get_size_long(*args):
  return _eccode_swig.grib_c_index_get_size_long(*args)
grib_c_index_get_size_long = _eccode_swig.grib_c_index_get_size_long

def grib_c_index_get_long(*args):
  return _eccode_swig.grib_c_index_get_long(*args)
grib_c_index_get_long = _eccode_swig.grib_c_index_get_long

def grib_c_index_get_real8(*args):
  return _eccode_swig.grib_c_index_get_real8(*args)
grib_c_index_get_real8 = _eccode_swig.grib_c_index_get_real8

def grib_c_index_get_string(*args):
  return _eccode_swig.grib_c_index_get_string(*args)
grib_c_index_get_string = _eccode_swig.grib_c_index_get_string

def grib_c_index_select_long(*args):
  return _eccode_swig.grib_c_index_select_long(*args)
grib_c_index_select_long = _eccode_swig.grib_c_index_select_long

def grib_c_index_select_real8(*args):
  return _eccode_swig.grib_c_index_select_real8(*args)
grib_c_index_select_real8 = _eccode_swig.grib_c_index_select_real8

def grib_c_index_select_string(*args):
  return _eccode_swig.grib_c_index_select_string(*args)
grib_c_index_select_string = _eccode_swig.grib_c_index_select_string

def grib_c_index_release(*args):
  return _eccode_swig.grib_c_index_release(*args)
grib_c_index_release = _eccode_swig.grib_c_index_release

def grib_c_iterator_delete(*args):
  return _eccode_swig.grib_c_iterator_delete(*args)
grib_c_iterator_delete = _eccode_swig.grib_c_iterator_delete

def grib_c_iterator_next(*args):
  return _eccode_swig.grib_c_iterator_next(*args)
grib_c_iterator_next = _eccode_swig.grib_c_iterator_next

def grib_c_get_string(*args):
  return _eccode_swig.grib_c_get_string(*args)
grib_c_get_string = _eccode_swig.grib_c_get_string

def grib_c_set_string(*args):
  return _eccode_swig.grib_c_set_string(*args)
grib_c_set_string = _eccode_swig.grib_c_set_string

def grib_c_get_long(*args):
  return _eccode_swig.grib_c_get_long(*args)
grib_c_get_long = _eccode_swig.grib_c_get_long

def grib_c_set_long(*args):
  return _eccode_swig.grib_c_set_long(*args)
grib_c_set_long = _eccode_swig.grib_c_set_long

def grib_c_get_double(*args):
  return _eccode_swig.grib_c_get_double(*args)
grib_c_get_double = _eccode_swig.grib_c_get_double

def grib_c_set_double(*args):
  return _eccode_swig.grib_c_set_double(*args)
grib_c_set_double = _eccode_swig.grib_c_set_double

def grib_c_set_real8_array(*args):
  return _eccode_swig.grib_c_set_real8_array(*args)
grib_c_set_real8_array = _eccode_swig.grib_c_set_real8_array

def grib_c_get_real8_array(*args):
  return _eccode_swig.grib_c_get_real8_array(*args)
grib_c_get_real8_array = _eccode_swig.grib_c_get_real8_array

def grib_c_get_long_array(*args):
  return _eccode_swig.grib_c_get_long_array(*args)
grib_c_get_long_array = _eccode_swig.grib_c_get_long_array

def grib_c_set_long_array(*args):
  return _eccode_swig.grib_c_set_long_array(*args)
grib_c_set_long_array = _eccode_swig.grib_c_set_long_array

def grib_c_get_real8_element(*args):
  return _eccode_swig.grib_c_get_real8_element(*args)
grib_c_get_real8_element = _eccode_swig.grib_c_get_real8_element

def grib_c_get_real8_elements(*args):
  return _eccode_swig.grib_c_get_real8_elements(*args)
grib_c_get_real8_elements = _eccode_swig.grib_c_get_real8_elements

def grib_c_set_missing(*args):
  return _eccode_swig.grib_c_set_missing(*args)
grib_c_set_missing = _eccode_swig.grib_c_set_missing

def grib_c_set_key_vals(*args):
  return _eccode_swig.grib_c_set_key_vals(*args)
grib_c_set_key_vals = _eccode_swig.grib_c_set_key_vals

def grib_c_is_missing(*args):
  return _eccode_swig.grib_c_is_missing(*args)
grib_c_is_missing = _eccode_swig.grib_c_is_missing

def grib_c_is_defined(*args):
  return _eccode_swig.grib_c_is_defined(*args)
grib_c_is_defined = _eccode_swig.grib_c_is_defined

def with_numpy():
  return _eccode_swig.with_numpy()
with_numpy = _eccode_swig.with_numpy

def grib_set_double_ndarray(*args):
  return _eccode_swig.grib_set_double_ndarray(*args)
grib_set_double_ndarray = _eccode_swig.grib_set_double_ndarray

def grib_set_long_ndarray(*args):
  return _eccode_swig.grib_set_long_ndarray(*args)
grib_set_long_ndarray = _eccode_swig.grib_set_long_ndarray

def grib_get_double_ndarray(*args):
  return _eccode_swig.grib_get_double_ndarray(*args)
grib_get_double_ndarray = _eccode_swig.grib_get_double_ndarray

def grib_get_long_ndarray(*args):
  return _eccode_swig.grib_get_long_ndarray(*args)
grib_get_long_ndarray = _eccode_swig.grib_get_long_ndarray

def grib_get_double_ndelements(*args):
  return _eccode_swig.grib_get_double_ndelements(*args)
grib_get_double_ndelements = _eccode_swig.grib_get_double_ndelements

def grib_c_find_nearest_single(*args):
  return _eccode_swig.grib_c_find_nearest_single(*args)
grib_c_find_nearest_single = _eccode_swig.grib_c_find_nearest_single

def grib_c_find_nearest_four_single(*args):
  return _eccode_swig.grib_c_find_nearest_four_single(*args)
grib_c_find_nearest_four_single = _eccode_swig.grib_c_find_nearest_four_single

def grib_c_get_message(*args):
  return _eccode_swig.grib_c_get_message(*args)
grib_c_get_message = _eccode_swig.grib_c_get_message

def grib_c_get_error_string(*args):
  return _eccode_swig.grib_c_get_error_string(*args)
grib_c_get_error_string = _eccode_swig.grib_c_get_error_string

def no_fail_on_wrong_length(*args):
  return _eccode_swig.no_fail_on_wrong_length(*args)
no_fail_on_wrong_length = _eccode_swig.no_fail_on_wrong_length

def grib_c_get_api_version():
  return _eccode_swig.grib_c_get_api_version()
grib_c_get_api_version = _eccode_swig.grib_c_get_api_version

def grib_c_gts_header_on():
  return _eccode_swig.grib_c_gts_header_on()
grib_c_gts_header_on = _eccode_swig.grib_c_gts_header_on

def grib_c_gts_header_off():
  return _eccode_swig.grib_c_gts_header_off()
grib_c_gts_header_off = _eccode_swig.grib_c_gts_header_off


